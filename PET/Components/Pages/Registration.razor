@page "/register"

@using PET.Models
@using PET.Interfaces
@using PET.Services
@using Blazored.Toast.Services

@inject ICurrency CurrencyService
@inject IUser UserService
@inject IToastService ToastService
@inject NavigationManager Navigation

<h3 class="mb-4 text-gray-900 text-center text-4xl font-bold">Register</h3>
@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger mx-auto flex w-max">@errorMessage</div>
}
<div class="bg-white p-8 mx-auto max-w-lg rounded-lg shadow-xl">
    <form class="space-y-3" @onsubmit="RegisterUser">
        <div>
            <label class="mb-2 text-gray-700 block text-lg font-medium">Username:</label>
            <input type="text" @bind="newUser.UserName"
                   class="border-gray-300 p-2 text-gray-800 w-full rounded-lg border transition-all focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
        </div>

        <div>
            <label class="mb-2 text-gray-700 block text-lg font-medium">Full Name:</label>
            <input type="text" @bind="newUser.Name"
                   class="border-gray-300 p-2 text-gray-800 w-full rounded-lg border transition-all focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
        </div>

        <div>
            <label class="mb-2 text-gray-700 block text-lg font-medium">Email:</label>
            <input type="email" @bind="newUser.Email"
                   class="border-gray-300 p-2 text-gray-800 w-full rounded-lg border transition-all focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
        </div>

        <div>
            <label class="mb-2 text-gray-700 block text-lg font-medium">Password:</label>
            <input type="password" @bind="newUser.Password"
                   class="border-gray-300 p-2 text-gray-800 w-full rounded-lg border transition-all focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
        </div>

        @* Currency *@
        <div>
            <label for="Currency" class="mb-2 text-gray-700 block text-lg font-medium">Currency:</label>
            <InputSelect id="Currency" @bind-Value="newUser.CurrencyCode" class="border-gray-300 p-2 text-gray-800 w-full rounded-lg border transition-all focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                <option value="">-- Select Currency --</option>
                @foreach (var currency in Currencies)
                {
                    <option value="@currency.Code">@currency.Name (@currency.Code)</option>
                }
            </InputSelect>
        </div>

        <div>
            <label class="mb-2 text-gray-700 block text-lg font-medium">Address:</label>
            <input type="text" @bind="newUser.Address"
                   class="border-gray-300 p-2 text-gray-800 w-full rounded-lg border transition-all focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
        </div>

        <div>
            <label class="mb-2 text-gray-700 block text-lg font-medium">Gender:</label>
            <select @bind="newUser.Gender"
                    class="border-gray-300 p-2 text-gray-800 w-full rounded-lg border transition-all focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                <option value="">-- Select Gender --</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
                <option value="Other">Other</option>
            </select>
        </div>

        <div>
            <label class="mb-2 text-gray-700 block text-lg font-medium">Phone:</label>
            <input type="tel" @bind="newUser.Phone"
                   class="border-gray-300 p-2 text-gray-800 w-full rounded-lg border transition-all focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
        </div>
        <div>
            <label class="mb-2 text-gray-700 block text-lg font-medium">Balance:</label>
            <input type="number" @bind="newUser.Balance"
                   class="border-gray-300 p-2 text-gray-800 w-full rounded-lg border transition-all focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
        </div>
        <button type="submit"
                class="bg-blue-500 py-3 text-white w-full rounded-lg text-lg font-medium transition-all hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
            Register
        </button>
    </form>
    <p class="text-center">Already have an account? <a href="/login">Login here!</a></p>
</div>

@code {
    private List<Currencies> Currencies { get; set; } = new List<Currencies>();
    private Users newUser = new Users();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Currencies = await CurrencyService.LoadAllCurrenciesAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading currencies: {ex.Message}";
        }
    }

    private async Task RegisterUser()
    {
        if (string.IsNullOrEmpty(newUser.UserName) || string.IsNullOrEmpty(newUser.Password) || string.IsNullOrEmpty(newUser.Email))
        {
            errorMessage = "Username, Email, and Password are required.";
            ToastService.ShowError(errorMessage);
            return;
        }
        if (newUser.Gender == null || newUser.Address == null || newUser.Phone == null)
        {
            errorMessage = "All fields need to be filled";
            ToastService.ShowError(errorMessage);
            return;
        }
        if (newUser.CurrencyCode == null)
        {
            errorMessage = "Currency must be set.";
            ToastService.ShowError(errorMessage);
            return;
        }
        if (newUser.Balance < 0)
        {
            errorMessage = "Initial balance is cannot be less than zero(0).";
            ToastService.ShowError(errorMessage);
            return;
        }

        try
        {
            // Hash the password using bcrypt
            // newUser.Password = BCrypt.Net.BCrypt.HashPassword(newUser.Password);

            newUser.Password = UserService.HashPassword(newUser.Password);

            // Manually map CurrencyCode to Currency object
            var selectedCurrency = Currencies.FirstOrDefault(c => c.Code == newUser.CurrencyCode);
            if (selectedCurrency != null)
            {
                newUser.Currency = selectedCurrency; // Set the complete Currency object
            }

            await UserService.SaveUserAsync(newUser);
            errorMessage = null; // Clear error
            ToastService.ShowSuccess("User registered successfully!");

            // Redirect to login or dashboard after successful registration
            Navigation.NavigateTo("/login");

            // Reset form after successful registration
            newUser = new Users();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error registering user: {ex.Message}";
            ToastService.ShowError(errorMessage);
        }
    }
}
