@page "/transaction"

@using CommunityToolkit.Maui.Storage
@using PET.Models
@using PET.Interfaces
@using PET.Services
@using Blazored.Toast.Services
@using PET.Helper
@using CommunityToolkit.Maui
@using OfficeOpenXml
@using OfficeOpenXml.Style

@inject PreferencesStoreClone Storage
@inject MapUser MapUser

@inject PageTitleService PageTitleService
@inject ITransaction TransactionService
@inject ITag TagService
@inject IUser UserService

@inject NavigationManager Navigation
@inject IToastService ToastService

<body class="space-y-6">
    <div class="justify-content-between flex items-center">
        <h2 class="text-2xl font-bold">
            Available Balance: @userCurrency @userBalance
        </h2>
        @* Add Transaction Button *@
        <div class="space-x-2">
            <button class="p-1.5 text-white w-36 rounded-md bg-[#006B6B] shadow-md" @onclick="() => OpenModal()">Add Transaction</button>

        </div>
    </div>

    @* Filter Controls *@
    <div class="mb-6 justify-content-between flex items-center">
        @* Search Input Field *@
        <input id="searchTransactions" type="text" placeholder="Search"
               class="w-64 border-gray-500 p-1.5 text-gray-800 rounded-2 placeholder-black rounded-md border focus:outline-[#006B6B]" @bind="searchQuery" @oninput="OnSearchInputChanged" />

        @* Transaction Type Filter *@
        <select id="transactionTypeFilter" @bind="transactionTypeFilter" class="w-36 border-gray-500 p-2 text-gray-800 rounded-2 rounded-md border focus:outline-[#006B6B]" placeholder="Type">
            <option value="">All Types</option>
            <option value="Debit">Debit</option>
            <option value="Credit">Credit</option>
        </select>

        @* Tag Filter *@
        <input id="tagFilter" type="text" @bind="tagFilter" class="w-36 border-gray-500 p-1.5 text-gray-800 rounded-2 placeholder-black rounded-md border focus:outline-[#006B6B]" list="tagList" placeholder="Tags" />
        <datalist id="tagList">
            @foreach (var tag in AllTags)
            {
                <option value="@tag.Name" />
            }
        </datalist>

        @* Date Range Filter *@
        <div class="flex items-center">
            <span class="mx-1">From</span>
            <input id="startDateFilter" type="date" @bind="startDateFilter" class="py-1 px-2 border-1 border-gray-300 rounded-2 focus:outline-[#006B6B]" />
            <span class="mx-2">to</span>
            <input id="endDateFilter" type="date" @bind="endDateFilter" class="py-1 px-2 border-1 border-gray-300 rounded-2 focus:outline-[#006B6B]" />
        </div>

        <div class="space-x-2">
             <button class="p-1.5 text-white w-28 rounded-md bg-[#006B6B] shadow-md" @onclick="FilterTransactions">Set Filter</button>
            <button class="p-1.5 text-white w-28 bg-red-500 rounded-md shadow-md" @onclick="ClearFilters">Clear Filters</button>
        </div>
    </div>



    <div class="gap-4 grid grid-cols-1 md:grid-cols-3">
        @* Total Inflow *@
        <div class="bg-green-200 p-4 space-y-1 rounded shadow">
            <div class="align-center text-md flex w-full justify-between">
                <span>Total Inflow</span>
                <span>@InflowNum</span>
            </div>
            <p class="text-xl font-semibold">
                @if (!FilteredTransactions.Any())
                {
                    <span>@userCurrency 0.00</span>
                }
                else
                {
                <p>@userCurrency @TotalInflow</p>
                <p class="text-gray-600 text-sm font-medium">@(InflowPercentageChange.StartsWith("-") ? InflowPercentageChange : "+" + InflowPercentageChange)% from last month</p>
                }
            </p>
        </div>

        @* Total Outflow *@
        <div class="bg-red-200 p-4 space-y-1 rounded shadow">
            <div class="align-center text-md flex w-full justify-between">
                <span>Total Outflow</span>
                <span>@OutflowNum</span>
            </div>
            <p class="text-xl font-semibold">
                @if (!FilteredTransactions.Any())
                {
                    <span>@userCurrency 0.00</span>
                }
                else
                {
                <p>@userCurrency @TotalOutflow</p>
                <p class="text-gray-600 text-sm font-medium">@(OutflowPercentageChange.StartsWith("-") ? OutflowPercentageChange : "+" + OutflowPercentageChange)% from last month</p>
                }
            </p>
        </div>

        @* Total transactions *@
        <div class="bg-blue-200 p-4 space-y-1 rounded shadow">
            <div class="align-center text-md flex w-full justify-between">
                <span>Total Transaction</span>
                <span>@TotalTransNum</span>
            </div>
            <p class="text-xl font-semibold">
                @if (!FilteredTransactions.Any())
                {
                    <span>@userCurrency 0.00</span>
                }
                else
                {
                <p>@userCurrency @TotalTransaction</p>
                <p class="text-gray-600 text-sm font-medium">@(TransactionPercentageChange.StartsWith("-") ? TransactionPercentageChange : "+" + TransactionPercentageChange)% from last month</p>
                }
            </p>
        </div>
    </div>

    @* Transactions Table *@
    @if (FilteredTransactions == null || FilteredTransactions.Count == 0)
    {
        <p>No transactions available.</p>
    }
    else
    {
        <div class="bg-white p-6 max-h-[28rem] overflow-y-hidden rounded-lg border-2 border-[#00B2B2] shadow-sm">
            <div class="mb-3 flex items-center justify-between">
                <p class="text-xl font-semibold">All Transactions</p>

                <button class="p-1.5 text-white w-36 rounded-md bg-[#006B6B] shadow-md" @onclick="SaveToExcel">
                    Save to Excel
                </button>
            </div>
            <div class="scrollbar-hide max-h-[20rem] overflow-y-scroll">
            <table class="mt-2 table w-full">
                <thead>
                    <tr class="border-black px-4 py-2 border-b-2 text-center">
                        <th>Title</th>
                        <th>Amount</th>
                        <th>Date</th>
                        <th>Transaction Type</th>
                        <th>Payment Method</th>
                        <th>Tags</th>
                        <th>Notes</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody >
                    @foreach (var transaction in FilteredTransactions)
                    {
                        <tr class="items-center border-b text-center">
                            <td class="max-w-24 truncate">@transaction.Title</td>
                            <td class="max-w-24 truncate">@userCurrency @transaction.Amount</td>
                            <td class="max-w-24 truncate">@transaction.Date.ToShortDateString()</td>
                            <td class="max-w-24 truncate">@transaction.TransactionType</td>
                            <td class="max-w-24 truncate">@transaction.PaymentMethod</td>
                            <td class="max-w-24 truncate">@string.Join(", ", transaction.TagName)</td>
                            <td class="max-w-24 truncate">@(transaction.Notes == null ? "-" : transaction.Notes)</td>
                            <td>
                                <div class="space-x-2 flex items-center justify-center">
                                    <button @onclick="() => OpenModal(transaction)">
                                        <img src="Images/edit.svg" alt="edit" class="h-5" />
                                    </button>
                                    <button @onclick="() => DeleteTransaction(transaction)">
                                        <img src="Images/delete.svg" alt="delete" class="h-5" />
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            </div>
        </div>
    }

    @if (isDeleteConfirmationVisible)
    {
        <div class="inset-0 bg-gray-700 fixed z-50 flex items-center justify-center bg-opacity-40">
            <div class="bg-white p-6 w-full max-w-max rounded-md shadow-lg">
                <p class="text-gray-800 text-lg font-semibold">Are you sure you want to delete this transaction?</p>
                <div class="mt-4 justify-content-center spacy-y-2 flex items-center">
                    <button class="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-700" @onclick="ConfirmDelete">
                        Delete
                    </button>
                    <button class="px-4 py-2 ml-3 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-500" @onclick="CancelDelete">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    }

    @* Modal *@
    @if (isModalVisible)
    {
        <div class="modal d-block" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header py-3">
                        <h5 class="modal-title font-bold">@modalTitle</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                    </div>

                    <div class="modal-body space-y-2">
                        <div >
                            <label for="transactionTitle" class="form-label">Title:</label>
                            <input id="transactionTitle" @bind="newTransaction.Title" class="form-control" />
                        </div>
                        <div >
                            <label for="transactionAmount" class="form-label">Amount:</label>
                            <input id="transactionAmount" @bind="newTransaction.Amount" type="number" class="form-control" />
                        </div>
                        <div >
                            <label for="transactionDate" class="form-label">Date:</label>
                            <input id="transactionDate" @bind="newTransaction.Date" type="date" class="form-control" />
                        </div>
                        <div >
                            <label for="transactionType" class="form-label">Transaction Type:</label>
                            <select id="transactionType" @bind="newTransaction.TransactionType" class="form-control">
                                <option value=""> -- Select -- </option>
                                <option value="Debit">Debit</option>
                                <option value="Credit">Credit</option>
                            </select>
                        </div>
                        <div >
                            <label for="paymentMethod" class="form-label">Payment Method:</label>
                            <select id="paymentMethod" @bind="newTransaction.PaymentMethod" class="form-control">
                                <option value=""> -- Select -- </option>
                                <option value="Cash">Cash</option>
                                <option value="Card">Card</option>
                                <option value="BankTransfer">Bank Transfer</option>
                                <option value="MobilePayment">Mobile Payment</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                        <div >
                            <label for="Tags" class="text-gray-700 block text-lg font-medium">Tags:</label>
                            <input id="Tags" type="text" @bind="newTransaction.TagName" list="tagList" class="border-gray-300 p-lg-2 text-gray-800 w-full rounded-lg border transition-all focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" @oninput="OnTagInputChanged" />

                            @* The datalist element will show available tags as suggestions *@
                            <datalist id="tagList">
                                @foreach (var tag in filteredTags)
                                {
                                    <option value="@tag.Name" />
                                }
                            </datalist>
                        </div>


                        <div >
                            <label for="transactionNotes" class="form-label">Notes:</label>
                            <textarea id="transactionNotes" @bind="newTransaction.Notes" class="form-control"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                        <button type="button" class="btn btn-success" @onclick="AddOrUpdateTransaction">@modalButtonText</button>
                    </div>

                </div>
            </div>
        </div>
    }
</body>

@code {
    string userName = string.Empty;
    string userCurrency = string.Empty;
    double userBalance = 0.00;

    double TotalInflow = 0.00;
    double TotalOutflow = 0.00;
    double TotalTransaction => TotalInflow + TotalOutflow;

    double PreviousMonthInflow = 0.00;
    double PreviousMonthOutflow = 0.00;
    double PreviousMonthTransaction = 0.00;

    int InflowNum = 0;
    int OutflowNum = 0;
    int TotalTransNum = 0;

    String InflowPercentageChange = "0";
    String OutflowPercentageChange = "0";
    String TransactionPercentageChange = "0";

    private string LoggedInUserName { get; set; }

    private List<Tags> AllTags { get; set; } = new List<Tags>();
    private List<Tags> filteredTags { get; set; } = new List<Tags>();

    // initialize new transaction to be added
    private List<Transactions> AllTransactions { get; set; } = new List<Transactions>();
    private List<Transactions> FilteredTransactions { get; set; } = new List<Transactions>();
    private Transactions newTransaction = new Transactions();

    private bool isDeleteConfirmationVisible = false;
    private Transactions transactionToDelete = null;

    // Filter and search
    private string searchQuery = string.Empty;
    private string transactionTypeFilter = string.Empty;
    private string tagFilter = string.Empty;
    public DateTime? startDateFilter { get; set; }
    public DateTime? endDateFilter { get; set; }

    // initialize value for if a user is editing a transaction
    private bool isEditing = false;
    private bool isModalVisible = false;
    private string modalTitle = "Add New Transaction";
    private string modalButtonText = "Add Transaction";

    protected override async Task OnInitializedAsync()
    {
        PageTitleService.PageTitle = "Transaction Overview";
        AllTags = await TagService.LoadAllTagsAsync();

        var loggedInUser = await MapUser.GetUserByUsernameAsync(Storage);
        if (loggedInUser != null)
        {
            LoggedInUserName = loggedInUser.Name;

            userName = loggedInUser.UserName;
            userBalance = loggedInUser.Balance;
            userCurrency = loggedInUser.CurrencyCode;
            var currentDate = DateTime.Now;
            startDateFilter = new DateTime(currentDate.Year, currentDate.Month, 1);
            endDateFilter = startDateFilter.Value.AddMonths(1).AddDays(-1);

            AllTransactions = await TransactionService.LoadAllTransactionsAsync();
            FilterTransactions();
        }
        else
        {
            Navigation.NavigateTo("/login");
        }

    }

    private void ClearFilters()
    {
        transactionTypeFilter = null;
        tagFilter = null;
        startDateFilter = null;
        endDateFilter = null;

        FilterTransactions();
        ToastService.ShowSuccess("Filters Cleared");
    }


    private void FilterTransactions()
    {
        var filteredTransactions = AllTransactions.Where(t => t.UserName == userName);

        if (!string.IsNullOrEmpty(transactionTypeFilter))
        {
            filteredTransactions = filteredTransactions.Where(t => t.TransactionType == transactionTypeFilter);
        }

        if (!string.IsNullOrEmpty(tagFilter))
        {
            filteredTransactions = filteredTransactions.Where(t => t.TagName.Contains(tagFilter, StringComparison.OrdinalIgnoreCase));
        }

        if (startDateFilter.HasValue)
        {
            filteredTransactions = filteredTransactions.Where(t => t.Date >= startDateFilter.Value);
        }

        if (endDateFilter.HasValue)
        {
            filteredTransactions = filteredTransactions.Where(t => t.Date <= endDateFilter.Value);
        }

        if (!string.IsNullOrEmpty(searchQuery))
        {
            filteredTransactions = filteredTransactions.Where(t => t.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase));
        }

        FilteredTransactions = filteredTransactions
            .OrderBy(t => t.Date)
            .ToList();
        UpdateTotals();

        // Calculate totals for the previous month
        if (startDateFilter.HasValue)
        {
            var previousMonthStart = startDateFilter.Value.AddMonths(-1);
            var previousMonthEnd = previousMonthStart.AddMonths(1).AddDays(-1);

            var previousMonthTransactions = AllTransactions
                .Where(t => t.UserName == userName && t.Date >= previousMonthStart && t.Date <= previousMonthEnd)
                .ToList();

            if (previousMonthTransactions != null && previousMonthTransactions.Any())
            {
                PreviousMonthInflow = previousMonthTransactions
                    .Where(t => t.TransactionType == "Credit")
                    .Sum(t => t.Amount);

                PreviousMonthOutflow = previousMonthTransactions
                    .Where(t => t.TransactionType == "Debit")
                    .Sum(t => t.Amount);

                PreviousMonthTransaction = PreviousMonthInflow + PreviousMonthOutflow;

                CalculatePercentageChanges();
            }
        }
        else
        {
            PreviousMonthInflow = 0;
            PreviousMonthOutflow = 0;
            PreviousMonthTransaction = 0;
            InflowPercentageChange = "0";
            OutflowPercentageChange = "0";
            TransactionPercentageChange = "0";
        }

    }

    private void CalculatePercentageChanges()
    {
        if (PreviousMonthInflow == 0.00)
        {
            InflowPercentageChange = "0";
        }
        else
        {
            InflowPercentageChange = Math.Round((((TotalInflow - PreviousMonthInflow) / PreviousMonthInflow) * 100), 2).ToString();
        }

        if (PreviousMonthOutflow == 0.00)
        {
            OutflowPercentageChange = "0";
        }
        else
        {
            OutflowPercentageChange = Math.Round((((TotalOutflow - PreviousMonthOutflow) / PreviousMonthOutflow) * 100), 2).ToString();
        }

        if (PreviousMonthTransaction == 0.00)
        {
            TransactionPercentageChange = "0";
        }
        else
        {
            TransactionPercentageChange = Math.Round((((TotalTransaction - PreviousMonthTransaction) / PreviousMonthTransaction) * 100), 2).ToString();
        }
    }


    private void UpdateTotals()
    {
        TotalInflow = FilteredTransactions
            .Where(t => t.TransactionType == "Credit")
            .Sum(t => t.Amount);

        TotalOutflow = FilteredTransactions
            .Where(t => t.TransactionType == "Debit")
            .Sum(t => t.Amount);

        InflowNum = FilteredTransactions.Where(t => t.TransactionType == "Credit").Count();
        OutflowNum = FilteredTransactions.Where(t => t.TransactionType == "Debit").Count();
        TotalTransNum = FilteredTransactions.Count();
    }

    private async Task SaveToExcel()
    {
        try
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial; // Set EPPlus license context

            var transactionService = new TransactionService();

            // Get the Excel file path
            var fileName = "Transactions.xlsx";
            var filePath = Path.Combine(FileSystem.AppDataDirectory, fileName);

            // Ensure the directory exists
            var directory = Path.GetDirectoryName(filePath);
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }

            // Save transactions to the Excel file
            await transactionService.ExportTransactionsToExcelAsync(FilteredTransactions, filePath);

            // Read the file into a MemoryStream
            var fileBytes = File.ReadAllBytes(filePath);
            using var stream = new MemoryStream(fileBytes);

            // Save the file using FileSaver
            var result = await FileSaver.Default.SaveAsync(fileName, stream);

            if (result.IsSuccessful)
            {
                ToastService.ShowSuccess($"File saved to {result.FilePath}");
            }
            else
            {
                ToastService.ShowError("File save canceled or failed.");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving to Excel: {ex.Message}");
        }
    }

    private void OnSearchInputChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        FilterTransactions();
    }

    private void OpenModal(Transactions? transaction = null)
    {
        if (transaction != null)
        {
            newTransaction = new Transactions
                {
                    Id = transaction.Id,
                    User = transaction.User,
                    UserName = transaction.UserName,
                    Title = transaction.Title,
                    Amount = transaction.Amount,
                    Date = transaction.Date,
                    TransactionType = transaction.TransactionType,
                    PaymentMethod = transaction.PaymentMethod,
                    Tags = transaction.Tags,
                    TagName = transaction.TagName,
                    Notes = transaction.Notes
                };
            isEditing = true;
            modalTitle = "Edit Transaction";
            modalButtonText = "Save Changes";
        }
        else
        {
            newTransaction = new Transactions();
            isEditing = false;
            modalTitle = "Add New Transaction";
            modalButtonText = "Add Transaction";
        }

        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
        ResetForm();
    }

    private void ResetForm()
    {
        newTransaction = new Transactions();
        isEditing = false;
    }

    private async Task OnTagInputChanged(ChangeEventArgs e)
    {
        var typedTag = e.Value?.ToString();

        if (string.IsNullOrWhiteSpace(typedTag))
        {
            filteredTags = AllTags;
            return;
        }

        // Filter existing tags based on the user's input
        filteredTags = AllTags.Where(t => t.Name.Contains(typedTag, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private async Task CheckAndAddTag()
    {
        if (string.IsNullOrWhiteSpace(newTransaction.TagName)) return;

        var existingTag = AllTags.FirstOrDefault(t => t.Name.Equals(newTransaction.TagName, StringComparison.OrdinalIgnoreCase));

        if (existingTag == null)
        {
            // The tag is not found, so add it as a new tag
            var newTag = new Tags { Name = newTransaction.TagName };
            AllTags.Add(newTag);

            await TagService.AddTagAsync(newTag);

            newTransaction.Tags = newTag;
        }
        else
        {
            newTransaction.Tags = existingTag;
        }
    }

    private void SelectTag(string tagName)
    {
        newTransaction.TagName = tagName;
        var selectedTag = AllTags.FirstOrDefault(t => t.Name == tagName);
        if (selectedTag != null)
        {
            newTransaction.Tags = selectedTag;
        }
    }

    private bool ValidateTransaction()
    {
        if (string.IsNullOrWhiteSpace(newTransaction.Title) || newTransaction.Amount <= 0)
        {
            ToastService.ShowError("Title and Amount must be provided, and Amount must be greater than zero.");
            return false;
        }

        if (string.IsNullOrWhiteSpace(newTransaction.TransactionType))
        {
            ToastService.ShowError("Transaction type must be selected");
            return false;
        }

        if (string.IsNullOrWhiteSpace(newTransaction.PaymentMethod))
        {
            ToastService.ShowError("Payment method must be selected");
            return false;
        }

        return true;
    }

    private async Task AddOrUpdateTransaction()
    {
        if (ValidateTransaction())
        {
            try
            {
                var loggedInUser = await MapUser.GetUserByUsernameAsync(Storage);
                newTransaction.User = loggedInUser;
                newTransaction.UserName = loggedInUser?.UserName;
                // For editing, revert the old transaction balance first
                if (isEditing)
                {
                    var existingTransaction = await TransactionService.GetTransactionByIdAsync(newTransaction.Id);
                    // reset transaction for editing
                    if (existingTransaction != null)
                    {
                        await TransactionService.RevertUserBalanceTransaction(loggedInUser, existingTransaction);
                    }
                }

                // Update balance based on the new transaction type
                await TransactionService.UpdateUserBalanceTransaction(loggedInUser, newTransaction);

                await HandleTags();

                if (!isEditing) // Add new transaction
                {
                    await TransactionService.AddTransactionAsync(newTransaction);
                    ToastService.ShowSuccess("Transaction Added");
                }
                else
                {
                    await TransactionService.UpdateTransactionAsync(newTransaction);
                    ToastService.ShowSuccess("Transaction Updated");
                }

                await UserService.UpdateUserAsync(loggedInUser);
                UpdateTotals();
                await OnInitializedAsync();
                CloseModal();
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"Error saving transaction: {ex.Message}");
            }
        }
    }

    private async Task HandleTags()
    {
        var selectedTag = AllTags.FirstOrDefault(t => t.Name == newTransaction.TagName);
        if (selectedTag == null && !string.IsNullOrWhiteSpace(newTransaction.TagName))
        {
            var newTag = new Tags
                {
                    Id = AllTags.Count > 0 ? AllTags.Max(t => t.Id) + 1 : 1,
                    Name = newTransaction.TagName
                };

            AllTags.Add(newTag);
            await TagService.AddTagAsync(newTag);
            selectedTag = newTag;
        }

        if (selectedTag != null)
        {
            newTransaction.Tags = selectedTag;
        }
    }

    private void DeleteTransaction(Transactions transaction)
    {
        transactionToDelete = transaction;
        isDeleteConfirmationVisible = true;
    }

    private async Task ConfirmDelete()
    {
        if (transactionToDelete != null)
        {
            try
            {
                // Get the logged-in user
                var loggedInUser = await MapUser.GetUserByUsernameAsync(Storage);

                // Revert the balance based on the type of the transaction (Credit or Debit)
                await TransactionService.RevertUserBalanceTransaction(loggedInUser, transactionToDelete);

                await UserService.UpdateUserAsync(loggedInUser);
                await TransactionService.DeleteTransactionAsync(transactionToDelete);
                UpdateTotals();
                await OnInitializedAsync();
                isDeleteConfirmationVisible = false;
                ToastService.ShowSuccess("Transaction Deleted");
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"Error deleting transaction: {ex.Message}");
            }
        }
    }

    private void CancelDelete()
    {
        isDeleteConfirmationVisible = false;
    }
}