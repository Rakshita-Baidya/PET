@page "/login"

@using PET.Models
@using PET.Interfaces
@using PET.Services
@using Blazored.Toast.Services

@inject IToastService ToastService
@inject IUser UserService
@inject NavigationManager Navigation


<div class="flex min-h-screen items-center justify-center">
    <div class="bg-white p-8 mx-auto w-1/3 rounded-md border-2 border-[#3A8C8C] shadow-md">
        <h3 class="mb-8 text-gray-800 text-center text-5xl font-bold">Login</h3>
        <form class="space-y-2" @onsubmit="LoginUser">
            <div>
                <label class="text-gray-700 block text-lg font-medium">Username:</label>
                <input type="text" @bind="UserName"
                       class="border-gray-300 p-2 text-gray-800 w-full rounded-md border focus:outline-none focus:ring-2 focus:ring-[#3A8C8C]" />
            </div>

            <div>
                <label class="text-gray-700 block text-lg font-medium">Password:</label>
                <input type="password" @bind="Password"
                       class="border-gray-300 p-2 text-gray-800 w-full rounded-md border focus:outline-none focus:ring-2 focus:ring-[#3A8C8C]" />
            </div>

            <button type="submit"
                    class="py-2 mt-4 text-white w-full rounded-md bg-[#006B6B] text-lg font-medium hover:bg-[#3A8C8C] focus:outline-none focus:ring-2 focus:ring-[#3A8C8C]">
                Login
            </button>
        </form>

        <p class="text-center">Don't have an account? <a href="/register" class="text-blue-500">Register here!</a></p>
    </div>
</div>
@code {
    private string UserName = string.Empty;
    private string Password = string.Empty;
    [Inject]
    private PreferencesStoreClone Storage { get; set; }

    private async Task LoginUser()
    {
        if (string.IsNullOrEmpty(UserName) || string.IsNullOrEmpty(Password))
        {
            ToastService.ShowError("Username and Password are required.");
            return;
        }
        else
        {


            try
            {
                var users = await UserService.LoadAllUsersAsync();
                var user = users.FirstOrDefault(u => u.UserName == UserName);

                if (user != null)
                {
                    // Validate password using bcrypt
                    // bool isPasswordValid = BCrypt.Net.BCrypt.Verify(UserInput.Password, user.Password);


                    if (UserService.PasswordValidation(Password, user.Password))
                    {
                        Storage.Set("Username", UserName);
                        string savedUsername = Preferences.Get("Username", string.Empty);
                        // Show success message and redirect
                        ToastService.ShowSuccess("Login successful!");
                        await Task.Delay(100);
                        Navigation.NavigateTo("/dashboard"); // Use NavigationManager for redirection
                    }
                    else
                    {
                        ToastService.ShowError("Invalid username or password.");
                    }
                }
                else
                {
                    ToastService.ShowError("Invalid username or password.");
                }

            }
            catch (Exception ex)
            {
                ToastService.ShowError($"Error during login: {ex.Message}");
            }
        }
    }
}
