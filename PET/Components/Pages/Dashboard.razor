@page "/dashboard"

@using PET.Models
@using PET.Interfaces
@using PET.Services
@using PET.Helper

@inject PageTitleService PageTitleService
@inject ITransaction TransactionService
@inject IDebt DebtService
@inject PreferencesStoreClone Storage
@inject MapUser MapUser
@inject NavigationManager Navigation


<h2 class="mb-6 text-2xl font-bold">
    Available Balance: @userCurrency @userBalance
</h2>


<div class="mb-6 justify-content-between flex items-center">
    @* Date Range Filter *@
    <div class="flex items-center">
        <label for="dateRangeFilter" class="form-label">Date Range:</label>
        <div class="d-flex">
            <input id="startDateFilter" type="date" @bind="startDateFilter" class="form-control" />
            <span class="mx-2">to</span>
            <input id="endDateFilter" type="date" @bind="endDateFilter" class="form-control" />
        </div>
    </div>
    <div>
        <button class="p-2 rounded-md bg-[#00B2B2]" @onclick="() => FilterData()">Filter</button>
    </div>
</div>

<div class="gap-6 grid grid-cols-1 md:grid-cols-3">
    @* Total Inflow *@
    <div class="bg-green-100 p-4 rounded shadow">
        <div class="align-center flex w-full justify-between">
            <p class="text-sm">Total Inflow</p>
            <img src="Images/stat-up.svg" alt="inflow" />
        </div>
        <p class="text-lg font-semibold">
            @if (!FilteredTransactions.Any())
            {
                <span>@userCurrency 0.00</span>
            }
            else
            {
                <span>@userCurrency @TotalInflow</span>
            }
        </p>
    </div>

    @* Total Outflow *@
    <div class="bg-red-100 p-4 rounded shadow">
        <div class="align-center flex w-full justify-between">
            <p class="text-sm">Total Outflow</p>
            <img src="Images/stat-down.svg" alt="outflow" />
        </div>
        <p class="text-lg font-semibold">
            @if (!FilteredTransactions.Any())
            {
                <span>@userCurrency 0.00</span>
            }
            else
            {
                <span>@userCurrency @TotalOutflow</span>
            }
        </p>
    </div>

    @* Total transactions *@
    <div class="bg-blue-100 p-4 rounded shadow">
        <div class="align-center flex w-full justify-between">
            <p class="text-sm">Total Transaction</p>
            <img src="Images/net.svg" alt="net balance" />
        </div>
        <p class="text-lg font-semibold">
            @if (!FilteredTransactions.Any())
            {
                <span>@userCurrency 0.00</span>
            }
            else
            {
                <span>@userCurrency @TotalTransaction</span>
            }
        </p>
    </div>
</div>

<div class="my-6 gap-6 grid grid-cols-1 md:grid-cols-3">
    @* Top 5 Highest Transactions *@
    <div class="bg-pink-100 p-4 col-span-1 rounded shadow">
        <div class="align-center flex w-full justify-between">
            <p class="fw-bold text-md">Top 5 Highest Transactions</p>
        </div>
        <ul class="mt-2 text-sm">
            <p class="text-md font-medium">
                @if (!FilteredTransactions.Any())
                {
                    <span>No Transactions recorded</span>
                }
                else
                {
                    @foreach (var transaction in TopHighestTransactions)
                    {
                    <li>@transaction.Title: @userCurrency @transaction.Amount</li>
                    }
                }
            </p>
        </ul>
    </div>

    @* Top 5 Lowest Transactions *@
    <div class="bg-pink-100 p-4 col-span-1 rounded shadow">
        <div class="align-center flex w-full justify-between">
            <p class="fw-bold text-md">Top 5 Lowest Transactions</p>
        </div>
        <ul class="mt-2 text-sm">
            <p class="text-md font-medium">
                @if (!FilteredTransactions.Any())
                {
                    <span>No Transactions recorded</span>
                }
                else
                {
                    @foreach (var transaction in TopLowestTransactions)
                    {
                    <li>@transaction.Title: @userCurrency @transaction.Amount</li>
                    }
                }
            </p>
        </ul>
    </div>

    @* Summary *@
    <div class="bg-pink-100 p-4 col-span-1 rounded shadow">
        <div class="align-center flex w-full justify-between">
            <p class="fw-bold text-md">Summary</p>

        </div>
    </div>
</div>

<div class="my-6 gap-6 grid grid-cols-1 md:grid-cols-3">
    @* Debt Summary *@
    <div class="bg-yellow-100 p-4 col-span-1 rounded shadow">
        <div class="align-center flex w-full justify-between">
            <p class="fw-bold text-md">Debt Summary</p>
        </div>
        <ul class="mt-2 text-sm">

            <div class="justify-content-between flex">
                <p class="text-sm">Total Debts Taken</p>
                <p class="text-md font-medium">
                    @if (!FilteredDebts.Any())
                    {
                        <span>@userCurrency 0.00</span>
                    }
                    else
                    {
                        <span>@userCurrency @OverallDebts</span>
                    }
                </p>
            </div>
            <div class="justify-content-between flex">
                <p class="text-sm">Total Debt Cleared</p>
                <p class="text-md font-medium">
                    @if (!FilteredDebts.Any())
                    {
                        <span>@userCurrency 0.00</span>
                    }
                    else
                    {
                        <span>@userCurrency @OverallCleared</span>
                    }
                </p>
            </div>
            <div class="justify-content-between flex">
                <p class="text-sm">Total Debt Remaining</p>
                <p class="text-md font-medium">
                    @if (!FilteredDebts.Any())
                    {
                        <span>@userCurrency 0.00</span>
                    }
                    else
                    {
                        <span>@userCurrency @OverallRemaining</span>
                    }
                </p>
            </div>
        </ul>
    </div>

    @* List debts *@
    <div class="bg-red-100 p-4 col-span-2 rounded shadow">
        <div class="align-center flex w-full justify-between">
            <p class="fw-bold text-md">Pending debts</p>
        </div>
        <ul class="mt-2 text-sm">
            @if (!FilteredTransactions.Any())
            {
                <span>No Debts recorded</span>
            }
            else
            {
                <table class="min-w-full table-auto">
                    <thead>
                        <tr class="border-black px-4 py-2 border-b-2 text-center">
                            <th>Source</th>
                            <th>Amount</th>
                            <th>Taken Date</th>
                            <th>Interest Rate</th>
                            <th>Due Date</th>
                            <th>Status</th>
                            <th>Notes</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var debt in PendingDebts)
                        {
                            <tr class="px-4 py-2 border-b text-center">
                                <td class="px-4 py-2">@debt.Source</td>
                                <td class="px-4 py-2">@debt.User.CurrencyCode @debt.Amount</td>
                                <td class="px-4 py-2">@debt.Taken_Date.ToShortDateString()</td>
                                <td class="px-4 py-2">@(debt.Interest_Rate == null ? "0" : debt.Interest_Rate)</td>
                                <td class="px-4 py-2">@debt.Due_Date.ToShortDateString()</td>
                                <td class="px-4 py-2">@(debt.Is_Cleared ? "Cleared" : "Pending")</td>
                                <td class="px-4 py-2">@(debt.Notes == null ? "-" : debt.Notes)</td>

                            </tr>
                        }
                    </tbody>
                </table>
            }
        </ul>
    </div>


</div>



@code {
    string userName = string.Empty;
    string userCurrency = string.Empty;
    double userBalance = 0.00;

    private double OverallDebts { get; set; }
    private double OverallCleared { get; set; }
    private double OverallRemaining => OverallDebts - OverallCleared;

    private double TotalInflow { get; set; }
    private double TotalOutflow { get; set; }
    private double TotalTransaction => TotalInflow + TotalOutflow;

    public DateTime? startDateFilter { get; set; }
    public DateTime? endDateFilter { get; set; }

    private List<Transactions> AllTransactions { get; set; } = new();
    private List<Transactions> FilteredTransactions { get; set; } = new();
    private List<Transactions> TopHighestTransactions { get; set; } = new();
    private List<Transactions> TopLowestTransactions { get; set; } = new();

    private List<Debts> AllDebts { get; set; } = new();
    private List<Debts> FilteredDebts { get; set; } = new();
    private List<Debts> PendingDebts { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        PageTitleService.PageTitle = "Transaction Overview";

        try
        {
            // Get logged-in user
            var loggedInUser = await MapUser.GetUserByUsernameAsync(Storage);
            if (loggedInUser != null)
            {
                userName = loggedInUser.UserName;
                userCurrency = loggedInUser.CurrencyCode;
                userBalance = loggedInUser.Balance;

                // Load all transactions
                AllTransactions = await TransactionService.LoadAllTransactionsAsync();

                FilterTransactions();

                AllDebts = await DebtService.LoadAllDebtsAsync();

                FilterDebts();


            }
            else
            {
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
    }
    private void FilterData()
    {
        FilterTransactions();
        FilterDebts();
    }

    private void FilterTransactions()
    {
        var filteredTransactions = AllTransactions.Where(t => t.UserName == userName);

        if (startDateFilter.HasValue)
        {
            filteredTransactions = filteredTransactions.Where(t => t.Date >= startDateFilter.Value);
        }

        if (endDateFilter.HasValue)
        {
            filteredTransactions = filteredTransactions.Where(t => t.Date <= endDateFilter.Value);
        }

        FilteredTransactions = filteredTransactions.ToList();

        UpdateTransactionTotals();
    }

    private void UpdateTransactionTotals()
    {
        TotalInflow = FilteredTransactions
            .Where(t => t.TransactionType == "Credit")
            .Sum(t => t.Amount);

        TotalOutflow = FilteredTransactions
            .Where(t => t.TransactionType == "Debit")
            .Sum(t => t.Amount);

        // Recalculate top transactions after filtering
        TopHighestTransactions = FilteredTransactions
            .OrderByDescending(t => t.Amount)
            .Take(5)
            .ToList();

        TopLowestTransactions = FilteredTransactions
            .OrderBy(t => t.Amount)
            .Take(5)
            .ToList();
    }

    private void FilterDebts()
    {
        var filteredDebts = AllDebts.Where(d => d.UserName == userName);

        if (startDateFilter.HasValue)
        {
            filteredDebts = filteredDebts.Where(d => d.Taken_Date >= startDateFilter.Value);
        }

        if (endDateFilter.HasValue)
        {
            filteredDebts = filteredDebts.Where(d => d.Taken_Date <= endDateFilter.Value);
        }

        FilteredDebts = filteredDebts.ToList();
        UpdateDebtTotals();
    }

    private void UpdateDebtTotals()
    {
        OverallDebts = FilteredDebts.Sum(d => d.Amount);

        OverallCleared = FilteredDebts
            .Where(d => d.Is_Cleared == true)
            .Sum(d => d.Amount);

        PendingDebts = FilteredDebts
            .Where(d => !d.Is_Cleared)
            .ToList();
    }
}
