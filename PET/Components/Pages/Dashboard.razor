@page "/dashboard"

@using PET.Models
@using PET.Interfaces
@using PET.Services
@using PET.Helper

@inject PageTitleService PageTitleService
@inject ITransaction TransactionService
@inject PreferencesStoreClone Storage
@inject MapUser MapUser

<h2 class="mb-6 text-2xl font-bold">
    Available Balance: @userCurrency @userBalance
</h2>


@* Date Range Filter *@
@* <div class="col-span-2"> *@
@*     <label for="dateRangeFilter" class="form-label">Date Range:</label> *@
@*     <div class="d-flex"> *@
@*         <input id="startDateFilter" type="date" @bind="startDateFilter" class="form-control" /> *@
@*         <span class="mx-2">to</span> *@
@*         <input id="endDateFilter" type="date" @bind="endDateFilter" class="form-control" /> *@
@*     </div> *@
@* </div> *@


<div class="gap-6 grid grid-cols-1 md:grid-cols-3">
    @* Total Inflow *@
    <div class="bg-green-100 p-4 rounded shadow">
        <div class="align-center flex w-full justify-between">
            <p class="text-sm">Total Inflow</p>
            <img src="~/favicon.png" />
        </div>
        <p class="text-lg font-semibold">
            @if (!FilteredTransactions.Any())
            {
                @* loggedin user currency *@
                <span>@userCurrency 0.00</span>
            }
            else
            {
                <span>@userCurrency @TotalInflow</span>
            }
        </p>
    </div>

    @* Total Outflow *@
    <div class="bg-red-100 p-4 rounded shadow">
        <div class="align-center flex w-full justify-between">
            <p class="text-sm">Total Outflow</p>
            <img src="~/favicon.png" />
        </div>
        <p class="text-lg font-semibold">
            @if (!FilteredTransactions.Any())
            {
                <span>@userCurrency 0.00</span>
            }
            else
            {
                <span>@userCurrency @TotalOutflow</span>
            }
        </p>
    </div>

    @* Total transactions *@
    <div class="bg-blue-100 p-4 rounded shadow">
        <div class="align-center flex w-full justify-between">
            <p class="text-sm">Total Transaction</p>
            <img src="~/favicon.png" />
        </div>
        <p class="text-lg font-semibold">
            @if (!FilteredTransactions.Any())
            {
                <span>@userCurrency 0.00</span>
            }
            else
            {
                <span>@userCurrency @TotalTransaction</span>
            }
        </p>
    </div>
</div>

<div class="my-6 gap-6 grid grid-cols-1 md:grid-cols-3">
    @* Top 5 Highest Transactions *@
    <div class="bg-pink-100 p-4 col-span-1 rounded shadow">
        <div class="align-center flex w-full justify-between">
            <p class="fw-bold text-md">Top 5 Highest Transactions</p>
        </div>
        <ul class="mt-2 text-sm">
            <p class="text-md font-medium">
                @if (!FilteredTransactions.Any())
                {
                    <span>No Transactions recorded</span>
                }
                else
                {
                    @foreach (var transaction in TopHighestTransactions)
                    {
                    <li>@transaction.Title: @userCurrency @transaction.Amount</li>
                    }
                }
            </p>
        </ul>
    </div>

    @* Top 5 Lowest Transactions *@
    <div class="bg-pink-100 p-4 col-span-1 rounded shadow">
        <div class="align-center flex w-full justify-between">
            <p class="fw-bold text-md">Top 5 Lowest Transactions</p>
        </div>
        <ul class="mt-2 text-sm">
            <p class="text-md font-medium">
                @if (!FilteredTransactions.Any())
                {
                    <span>No Transactions recorded</span>
                }
                else
                {
                    @foreach (var transaction in TopLowestTransactions)
                    {
                    <li>@transaction.Title: @userCurrency @transaction.Amount</li>
                    }
                }
            </p>
        </ul>
    </div>

    @* Summary *@
    <div class="bg-pink-100 p-4 col-span-1 rounded shadow">
        <div class="align-center flex w-full justify-between">
            <p class="fw-bold text-md">Summary</p>
        </div>
    </div>
</div>

<div class="my-6 gap-6 grid grid-cols-1 md:grid-cols-3">
    @* Debt Summary *@
    <div class="bg-yellow-100 p-4 col-span-1 rounded shadow">
        <div class="align-center flex w-full justify-between">
            <p class="fw-bold text-md">Debt Summary</p>
        </div>
        <ul class="mt-2 text-sm">
            @* <p class="text-md font-medium"> *@
            @*     @if (!FilteredTransactions.Any()) *@
            @*     { *@
            @*         <span>No Debts recorded</span> *@
            @*     } *@
            @*     else *@
            @*     { *@
            @*         @foreach (var transaction in TopHighestTransactions) *@
            @*         { *@
            @*         <li>@transaction.Title: @userCurrency @transaction.Amount</li> *@
            @*         } *@
            @*     } *@
            @* </p> *@
        </ul>
    </div>

    @* List debts *@
    <div class="bg-red-100 p-4 col-span-2 rounded shadow">
        <div class="align-center flex w-full justify-between">
            <p class="fw-bold text-md">Pending debts</p>
        </div>
        <ul class="mt-2 text-sm">
            @* <p class="text-md font-medium"> *@
            @*     @if (!FilteredTransactions.Any()) *@
            @*     { *@
            @*         <span>No Transactions recorded</span> *@
            @*     } *@
            @*     else *@
            @*     { *@
            @*         @foreach (var transaction in TopLowestTransactions) *@
            @*         { *@
            @*         <li>@transaction.Title: @userCurrency @transaction.Amount</li> *@
            @*         } *@
            @*     } *@
            @* </p> *@
        </ul>
    </div>


</div>



@code {
    string userCurrency = string.Empty;
    double userBalance = 0.00;

    private double TotalInflow { get; set; }
    private double TotalOutflow { get; set; }
    private double TotalTransaction => TotalInflow + TotalOutflow;

    public DateTime? startDateFilter { get; set; }
    public DateTime? endDateFilter { get; set; }

    private List<Transactions> AllTransactions { get; set; } = new();
    private List<Transactions> FilteredTransactions { get; set; } = new();
    private List<Transactions> TopHighestTransactions { get; set; } = new();
    private List<Transactions> TopLowestTransactions { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        PageTitleService.PageTitle = "Transaction Overview";

        try
        {
            // Get logged-in user
            var loggedInUser = await MapUser.GetUserByUsernameAsync(Storage);

            userCurrency = loggedInUser.CurrencyCode;
            userBalance = loggedInUser.Balance;

            // Load all transactions
            AllTransactions = await TransactionService.LoadAllTransactionsAsync();

            // Filter transactions for the logged-in user
            FilteredTransactions = AllTransactions
                .Where(t => t.UserName == loggedInUser.UserName)
                .ToList();

            if (FilteredTransactions.Any())
            {
                // Calculate total inflow
                TotalInflow = FilteredTransactions
                    .Where(t => t.TransactionType == "Credit")
                    .Sum(t => t.Amount);

                // Calculate total outflow
                TotalOutflow = FilteredTransactions
                    .Where(t => t.TransactionType == "Debit")
                    .Sum(t => t.Amount);

                // Get top 5 highest transactions
                TopHighestTransactions = FilteredTransactions
                    .OrderByDescending(t => t.Amount)
                    .Take(5)
                    .ToList();

                // Get top 5 lowest transactions
                TopLowestTransactions = FilteredTransactions
                    .OrderBy(t => t.Amount)
                    .Take(5)
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
    }
}
