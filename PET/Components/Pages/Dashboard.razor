@page "/dashboard"

@using PET.Models
@using PET.Interfaces
@using PET.Services
@using PET.Helper
@using Blazored.Toast.Services
@using Microsoft.JSInterop

@inject IToastService ToastService
@inject PageTitleService PageTitleService
@inject NavigationManager Navigation
@inject PreferencesStoreClone Storage
@inject MapUser MapUser
@inject ITransaction TransactionService
@inject IDebt DebtService
@inject IJSRuntime JSRuntime

<body class="space-y-6">

    @* Filter Controls *@
    <div class="justify-content-between flex items-center">

        <h2 class="text-2xl font-bold">
            Available Balance: @userCurrency @userBalance
        </h2>
        <div class="space-x-3 flex items-center">
            @* Date Range Filter *@
            <div class="flex items-center">
                <span class="mx-1">From</span>
                <input id="startDateFilter" type="date" @bind="startDateFilter" class="py-1 px-2 border-1 border-gray-300 rounded-2 focus:outline-[#006B6B]" />
                <span class="mx-2">to</span>
                <input id="endDateFilter" type="date" @bind="endDateFilter" class="py-1 px-2 border-1 border-gray-300 rounded-2 focus:outline-[#006B6B]" />
            </div>
            <div class="space-x-2">
                <button class="p-1.5 text-white w-28 rounded-md bg-[#006B6B] shadow-md" @onclick="FilterData">Set Filter</button>
                <button class="p-1.5 text-white w-28 bg-red-500 rounded-md shadow-md" @onclick="ClearFilters">Clear Filters</button>
            </div>
        </div>
    </div>

    <div class="gap-4 grid grid-cols-1 md:grid-cols-3">
        @* Total Inflow *@
        <div class="bg-green-200 p-4 space-y-1 rounded shadow">
            <div class="align-center flex w-full justify-between">
                <p class="text-md">Total Inflow</p>
                <img src="Images/stat-up.svg" alt="inflow" />
            </div>
            <p class="text-xl font-semibold">
                @if (!FilteredTransactions.Any())
                {
                    <span>@userCurrency 0.00</span>
                }
                else
                {
                <p>@userCurrency @TotalInflow</p>
                <p class="text-gray-600 text-sm font-medium">@(InflowPercentageChange.StartsWith("-") ? InflowPercentageChange : "+" + InflowPercentageChange)% from last month</p>
                }
            </p>
        </div>

        @* Total Outflow *@
        <div class="bg-red-200 p-4 space-y-1 rounded shadow">
            <div class="align-center flex w-full justify-between">
                <p class="text-md">Total Outflow</p>
                <img src="Images/stat-down.svg" alt="outflow" />
            </div>
            <p class="text-xl font-semibold">
                @if (!FilteredTransactions.Any())
                {
                    <span>@userCurrency 0.00</span>
                }
                else
                {
                <p>@userCurrency @TotalOutflow</p>
                <p class="text-gray-600 text-sm font-medium">@(OutflowPercentageChange.StartsWith("-") ? OutflowPercentageChange : "+" + OutflowPercentageChange)% from last month</p>
                }
            </p>
        </div>

        @* Total transactions *@
        <div class="bg-blue-200 p-4 space-y-1 rounded shadow">
            <div class="align-center flex w-full justify-between">
                <p class="text-md">Total Transaction</p>
                <img src="Images/net.svg" alt="net balance" />
            </div>
            <p class="text-xl font-semibold">
                @if (!FilteredTransactions.Any())
                {
                    <span>@userCurrency 0.00</span>
                }
                else
                {
                <p>@userCurrency @TotalTransaction</p>
                <p class="text-gray-600 text-sm font-medium">@(TransactionPercentageChange.StartsWith("-") ? TransactionPercentageChange : "+" + TransactionPercentageChange)% from last month</p>
                }
            </p>
        </div>
    </div>

    <div class="gap-4 grid grid-cols-1 md:grid-cols-3">
        @* Top 5 Highest Transactions *@
        <div class="bg-pink-100 p-4 col-span-1 rounded shadow">
            <p class="text-gray-700 mb-2 text-lg font-semibold">Top 5 Highest Transactions</p>
            <ul class="px-2">
                @if (!FilteredTransactions.Any())
                {
                    <li>No Transactions recorded</li>
                }
                else
                {
                    @foreach (var transaction in TopHighestTransactions)
                    {
                        <li class="space-y-1 flex justify-between">
                            <div class="space-x-2 flex items-center">
                                <img src="Images/dot.png" alt="*" class="w-4 h-4" />
                                <p class="text-lg font-medium">@transaction.Title</p>
                            </div>
                            <p class="text-lg font-bold">
                                @if (transaction.TransactionType == "Debit")
                                {
                                    <span>-@userCurrency @transaction.Amount</span>
                                }
                                else if (transaction.TransactionType == "Credit")
                                {
                                    <span>+@userCurrency @transaction.Amount</span>
                                }
                            </p>
                        </li>
                    }
                }
            </ul>
        </div>


        @* Top 5 Lowest Transactions *@
        <div class="bg-pink-100 p-4 col-span-1 rounded shadow">
            <p class="text-gray-700 mb-2 text-lg font-semibold">Top 5 Lowest Transactions</p>
            <ul class="px-2">
                @if (!FilteredTransactions.Any())
                {
                    <li>No Transactions recorded</li>
                }
                else
                {
                    @foreach (var transaction in TopLowestTransactions)
                    {
                        <li class="space-y-1 flex justify-between">
                            <div class="space-x-2 flex items-center">
                                <img src="Images/dot.png" alt="*" class="w-4 h-4" />
                                <p class="text-lg font-medium">@transaction.Title</p>
                            </div>
                            <p class="text-lg font-bold">
                                @if (transaction.TransactionType == "Debit")
                                {
                                    <span>-@userCurrency @transaction.Amount</span>
                                }
                                else if (transaction.TransactionType == "Credit")
                                {
                                    <span>+@userCurrency @transaction.Amount</span>
                                }
                            </p>
                        </li>
                    }
                }
            </ul>
        </div>

        @* Summary *@
        <div class="bg-pink-100 p-4 col-span-1 rounded shadow">
            <div class="h-48 w-full">
                <p class="text-gray-700 mb-2 text-lg font-semibold">Summary</p>
                <canvas id="transactionChart" class="pb-4 w-full object-contain"></canvas>
            </div>
        </div>
    </div>

    <div class="gap-4 grid grid-cols-1 md:grid-cols-5">
        @* Debt Summary *@
        <div class="bg-yellow-100 p-4 col-span-1 rounded shadow">
            <div class="align-center flex w-full justify-between">
                <p class="text-gray-700 mb-2 text-lg font-semibold">Debt Summary</p>

            </div>
            <ul class="px-2 space-y-2">

                <div>
                    <p class="text-sm font-medium">Total Debts Taken</p>
                    <p class="text-md font-bold">
                        @if (!FilteredDebts.Any())
                        {
                            <span>@userCurrency 0.00</span>
                        }
                        else
                        {
                            <span>@userCurrency @OverallDebts</span>
                        }
                    </p>
                </div>
                <div>
                    <p class="text-sm font-medium">Total Debt Cleared</p>
                    <p class="text-md font-bold">
                        @if (!FilteredDebts.Any())
                        {
                            <span>@userCurrency 0.00</span>
                        }
                        else
                        {
                            <span>@userCurrency @OverallCleared</span>
                        }
                    </p>
                </div>
                <div>
                    <p class="text-sm font-medium">Total Debt Remaining</p>
                    <p class="text-md font-bold">
                        @if (!FilteredDebts.Any())
                        {
                            <span>@userCurrency 0.00</span>
                        }
                        else
                        {
                            <span>@userCurrency @OverallRemaining</span>
                        }
                    </p>
                </div>
            </ul>
        </div>

        @* List pending debts *@
        <div class="bg-red-100 p-4 col-span-4 rounded shadow">
            <p class="text-gray-700 mb-2 text-lg font-semibold">Pending debts</p>
            @if (!FilteredTransactions.Any())
            {
                <span>No Debts recorded</span>
            }
            else
            {
                <div class="pr-4 scrollbar-hide max-h-[8rem] overflow-y-scroll">
                    <table class="table min-w-full">
                        <thead>
                            <tr class="border-black px-4 pb-2 border-b-[3px] text-center">
                                <th>Source</th>
                                <th>Amount</th>
                                <th>Taken Date</th>
                                <th>Interest Rate</th>
                                <th>Due Date</th>
                                <th>Status</th>
                                <th>Notes</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var debt in PendingDebts)
                            {
                                <tr class="px-4 py-2 border-black border-b text-center">
                                    <td class="px-4 py-2">@debt.Source</td>
                                    <td class="px-4 py-2">@debt.User.CurrencyCode @debt.Amount</td>
                                    <td class="px-4 py-2">@debt.Taken_Date.ToShortDateString()</td>
                                    <td class="px-4 py-2">@(debt.Interest_Rate == null ? "0" : debt.Interest_Rate)</td>
                                    <td class="px-4 py-2">@debt.Due_Date.ToShortDateString()</td>
                                    <td class="px-4 py-2">@(debt.Is_Cleared ? "Cleared" : "Pending")</td>
                                    <td class="px-4 py-2">@(debt.Notes == null ? "-" : debt.Notes)</td>

                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>

</body>


@code {
    string userName = string.Empty;
    string userCurrency = string.Empty;
    double userBalance = 0.00;

    double OverallDebts = 0.00;
    double OverallCleared = 0.00;
    double OverallRemaining => OverallDebts - OverallCleared;

    double TotalInflow = 0.00;
    double TotalOutflow = 0.00;
    double TotalTransaction => TotalInflow + TotalOutflow;

    double PreviousMonthInflow = 0.00;
    double PreviousMonthOutflow = 0.00;
    double PreviousMonthTransaction = 0.00;

    String InflowPercentageChange = "0";
    String OutflowPercentageChange = "0";
    String TransactionPercentageChange = "0";

    public DateTime? startDateFilter { get; set; }
    public DateTime? endDateFilter { get; set; }

    private List<Transactions> AllTransactions { get; set; } = new();
    private List<Transactions> FilteredTransactions { get; set; } = new();
    private List<Transactions> TopHighestTransactions { get; set; } = new();
    private List<Transactions> TopLowestTransactions { get; set; } = new();

    private List<Debts> AllDebts { get; set; } = new();
    private List<Debts> FilteredDebts { get; set; } = new();
    private List<Debts> PendingDebts { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        PageTitleService.PageTitle = "Transaction Overview";

        try
        {
            // Get logged-in user
            var loggedInUser = await MapUser.GetUserByUsernameAsync(Storage);
            if (loggedInUser != null)
            {
                userName = loggedInUser.UserName;
                userCurrency = loggedInUser.CurrencyCode;
                userBalance = loggedInUser.Balance;

                var currentDate = DateTime.Now;
                startDateFilter = new DateTime(currentDate.Year, currentDate.Month, 1);
                endDateFilter = startDateFilter.Value.AddMonths(1).AddDays(-1);

                AllTransactions = await TransactionService.LoadAllTransactionsAsync();
                AllDebts = await DebtService.LoadAllDebtsAsync();

                FilterData();
            }
            else
            {
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading dashboard data: {ex.Message}");
        }
    }


    private void FilterData()
    {
        FilterTransactions();
        FilterDebts();
    }

    private void ClearFilters()
    {
        startDateFilter = null;
        endDateFilter = null;

        FilterTransactions();
        FilterDebts();
    }


    private void FilterTransactions()
    {
        var filteredTransactions = AllTransactions.Where(t => t.UserName == userName);

        if (startDateFilter.HasValue)
        {
            filteredTransactions = filteredTransactions.Where(t => t.Date >= startDateFilter.Value);
        }

        if (endDateFilter.HasValue)
        {
            filteredTransactions = filteredTransactions.Where(t => t.Date <= endDateFilter.Value);
        }

        FilteredTransactions = filteredTransactions
            .OrderBy(t => t.Date)
            .ToList();

        UpdateTransactionTotals();

        var dailyTotals = FilteredTransactions
        .GroupBy(t => t.Date.Date)
        .Select(g => new
        {
            Date = g.Key.ToString("MMM dd"),
            Inflow = g.Where(t => t.TransactionType == "Credit").Sum(t => t.Amount),
            Outflow = g.Where(t => t.TransactionType == "Debit").Sum(t => t.Amount)
        })
        .ToList();

        // Get dates, inflows, and outflows for chart
        var dates = dailyTotals.Select(d => d.Date).ToList();
        var inflowData = dailyTotals.Select(d => d.Inflow).ToList();
        var outflowData = dailyTotals.Select(d => d.Outflow).ToList();

        // Update the chart with the daily data
        JSRuntime.InvokeVoidAsync("updateChart", "transactionChart", dates, inflowData, outflowData);

        // Calculate totals for the previous month
        if (startDateFilter.HasValue)
        {
            var previousMonthStart = startDateFilter.Value.AddMonths(-1);
            var previousMonthEnd = previousMonthStart.AddMonths(1).AddDays(-1);

            var previousMonthTransactions = AllTransactions
                .Where(t => t.UserName == userName && t.Date >= previousMonthStart && t.Date <= previousMonthEnd)
                .ToList();

            if (previousMonthTransactions != null && previousMonthTransactions.Any())
            {
                PreviousMonthInflow = previousMonthTransactions
                    .Where(t => t.TransactionType == "Credit")
                    .Sum(t => t.Amount);

                PreviousMonthOutflow = previousMonthTransactions
                    .Where(t => t.TransactionType == "Debit")
                    .Sum(t => t.Amount);

                PreviousMonthTransaction = PreviousMonthInflow + PreviousMonthOutflow;

                CalculatePercentageChanges();
            }
        }
        else
        {
            PreviousMonthInflow = 0;
            PreviousMonthOutflow = 0;
            PreviousMonthTransaction = 0;
            InflowPercentageChange = "0";
            OutflowPercentageChange = "0";
            TransactionPercentageChange = "0";
        }

    }

    private void CalculatePercentageChanges()
    {

        InflowPercentageChange = Math.Round((((TotalInflow - PreviousMonthInflow) / PreviousMonthInflow) * 100), 2).ToString();
        OutflowPercentageChange = Math.Round((((TotalOutflow - PreviousMonthOutflow) / PreviousMonthOutflow) * 100), 2).ToString();
        TransactionPercentageChange = Math.Round((((TotalTransaction - PreviousMonthTransaction) / PreviousMonthTransaction) * 100), 2).ToString();
    }


    private void UpdateTransactionTotals()
    {
        TotalInflow = FilteredTransactions
            .Where(t => t.TransactionType == "Credit")
            .Sum(t => t.Amount);

        TotalOutflow = FilteredTransactions
            .Where(t => t.TransactionType == "Debit")
            .Sum(t => t.Amount);

        // Recalculate top transactions after filtering
        TopHighestTransactions = FilteredTransactions
            .OrderByDescending(t => t.Amount)
            .Take(5)
            .ToList();

        TopLowestTransactions = FilteredTransactions
            .OrderBy(t => t.Amount)
            .Take(5)
            .ToList();
    }

    private void FilterDebts()
    {
        var filteredDebts = AllDebts.Where(d => d.UserName == userName);

        if (startDateFilter.HasValue)
        {
            filteredDebts = filteredDebts.Where(d => d.Taken_Date >= startDateFilter.Value);
        }

        if (endDateFilter.HasValue)
        {
            filteredDebts = filteredDebts.Where(d => d.Taken_Date <= endDateFilter.Value);
        }

        FilteredDebts = filteredDebts.OrderBy(d => d.Amount).ToList();
        UpdateDebtTotals();
    }

    private void UpdateDebtTotals()
    {
        OverallDebts = FilteredDebts.Sum(d => d.Amount);

        OverallCleared = FilteredDebts
            .Where(d => d.Is_Cleared == true)
            .Sum(d => d.Amount);

        PendingDebts = FilteredDebts
            .Where(d => !d.Is_Cleared)
            .ToList();
    }

}
